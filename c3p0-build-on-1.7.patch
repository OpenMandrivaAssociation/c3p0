diff --git a/src/java/com/mchange/v2/c3p0/ComboPooledDataSource.java b/src/java/com/mchange/v2/c3p0/ComboPooledDataSource.java
index 7ebe0d5..ffa6b0c 100644
--- a/src/java/com/mchange/v2/c3p0/ComboPooledDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/ComboPooledDataSource.java
@@ -631,6 +631,9 @@ public final class ComboPooledDataSource extends AbstractPoolBackedDataSource im
 	    throw new SQLException("no object found");
 	}
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
 
 //now, referenceability happens exactly the same way it does for PoolBackedDataSource
diff --git a/src/java/com/mchange/v2/c3p0/DriverManagerDataSource.java b/src/java/com/mchange/v2/c3p0/DriverManagerDataSource.java
index 5f55a48..9c9bfd7 100644
--- a/src/java/com/mchange/v2/c3p0/DriverManagerDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/DriverManagerDataSource.java
@@ -283,4 +283,7 @@ public final class DriverManagerDataSource extends DriverManagerDataSourceBase i
 	    throw new SQLException("no object found");
 	}
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
diff --git a/src/java/com/mchange/v2/c3p0/JndiRefConnectionPoolDataSource.java b/src/java/com/mchange/v2/c3p0/JndiRefConnectionPoolDataSource.java
index 7f99557..91515ab 100644
--- a/src/java/com/mchange/v2/c3p0/JndiRefConnectionPoolDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/JndiRefConnectionPoolDataSource.java
@@ -319,5 +319,8 @@ public final class JndiRefConnectionPoolDataSource extends IdentityTokenResolvab
 	sb.append("]");
 	return sb.toString();
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
 
diff --git a/src/java/com/mchange/v2/c3p0/JndiRefForwardingDataSource.java b/src/java/com/mchange/v2/c3p0/JndiRefForwardingDataSource.java
index 548f32d..30897bc 100644
--- a/src/java/com/mchange/v2/c3p0/JndiRefForwardingDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/JndiRefForwardingDataSource.java
@@ -197,5 +197,8 @@ final class JndiRefForwardingDataSource extends JndiRefDataSourceBase implements
 	    throw new SQLException("no object found");
 	}
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
 
diff --git a/src/java/com/mchange/v2/c3p0/PoolBackedDataSource.java b/src/java/com/mchange/v2/c3p0/PoolBackedDataSource.java
index f7d5a15..e65a4e2 100644
--- a/src/java/com/mchange/v2/c3p0/PoolBackedDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/PoolBackedDataSource.java
@@ -67,5 +67,8 @@ public final class PoolBackedDataSource extends AbstractPoolBackedDataSource imp
 	    throw new SQLException("no object found");
 	}
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
 
diff --git a/src/java/com/mchange/v2/c3p0/WrapperConnectionPoolDataSource.java b/src/java/com/mchange/v2/c3p0/WrapperConnectionPoolDataSource.java
index 6f45c9d..1174a06 100644
--- a/src/java/com/mchange/v2/c3p0/WrapperConnectionPoolDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/WrapperConnectionPoolDataSource.java
@@ -332,4 +332,7 @@ public final class WrapperConnectionPoolDataSource extends WrapperConnectionPool
 	else
 	    this.connectionTester = C3P0ImplUtils.defaultConnectionTester();
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
diff --git a/src/java/com/mchange/v2/c3p0/codegen/JdbcProxyGenerator.java b/src/java/com/mchange/v2/c3p0/codegen/JdbcProxyGenerator.java
index b78e6c0..c250352 100644
--- a/src/java/com/mchange/v2/c3p0/codegen/JdbcProxyGenerator.java
+++ b/src/java/com/mchange/v2/c3p0/codegen/JdbcProxyGenerator.java
@@ -1115,16 +1115,16 @@ public abstract class JdbcProxyGenerator extends DelegatorGenerator
 
     interface JDBC4TemporaryPreparedStatementMethods
     {
-	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException;
-	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException;
-	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException;
-	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException;
-	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException;
-	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException;
-	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException;
-	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException;
-	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException;
-	public void setClob(int parameterIndex, Reader reader) throws SQLException;
+	//public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException;
+	//public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException;
+	//public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException;
+	//public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException;
+	//public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException;
+	//public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException;
+	//public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException;
+	//public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException;
+	//public void setClob(int parameterIndex, Reader reader, long length) throws SQLException;
+	//public void setClob(int parameterIndex, Reader reader) throws SQLException;
 
 	// test only
 	// public void finalize() throws Throwable;
diff --git a/src/java/com/mchange/v2/c3p0/impl/C3P0PooledConnection.java b/src/java/com/mchange/v2/c3p0/impl/C3P0PooledConnection.java
index ce0507e..7148a71 100644
--- a/src/java/com/mchange/v2/c3p0/impl/C3P0PooledConnection.java
+++ b/src/java/com/mchange/v2/c3p0/impl/C3P0PooledConnection.java
@@ -720,6 +720,12 @@ public final class C3P0PooledConnection extends AbstractC3P0PooledConnection
 	{
 	    throw new RuntimeException(new NoSuchMethodException("stub method"));
 	}
+
+	public Object getObject(String columnLabel, Class type) throws SQLException
+	{ throw new SQLFeatureNotSupportedException(); }
+
+	public Object getObject(int columnNumber, Class type) throws SQLException
+	{ throw new SQLFeatureNotSupportedException(); }
     }
 
     /*
@@ -1055,6 +1061,18 @@ public final class C3P0PooledConnection extends AbstractC3P0PooledConnection
 
 			public RowId getRowId( int i ) throws SQLFeatureNotSupportedException
 			{ throw new SQLFeatureNotSupportedException(); }
+
+			public void closeOnCompletion() throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
+
+			public boolean isCloseOnCompletion() throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
+	
+			public Object getObject(String columnLabel, Class type) throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
+
+			public Object getObject(int columnNumber, Class type) throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
 		    }
 
 		return new ProxyCallableStatement((CallableStatement) innerStmt );
@@ -1183,6 +1201,12 @@ public final class C3P0PooledConnection extends AbstractC3P0PooledConnection
 
 			public void setRowId( int i, RowId r ) throws SQLFeatureNotSupportedException
 			{ throw new SQLFeatureNotSupportedException(); }
+
+			public void closeOnCompletion() throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
+
+			public boolean isCloseOnCompletion() throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
 		    }
 
 		return new ProxyPreparedStatement((PreparedStatement) innerStmt );
@@ -1251,6 +1275,12 @@ public final class C3P0PooledConnection extends AbstractC3P0PooledConnection
 			    // should people be calling unwrap if isWrapperFor returns false?
 			    return null;
 			}
+
+			public void closeOnCompletion() throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
+
+			public boolean isCloseOnCompletion() throws SQLException
+			{ throw new SQLFeatureNotSupportedException(); }
 		    }
 
 		return new ProxyStatement( innerStmt );
diff --git a/src/java/com/mchange/v2/c3p0/impl/NullStatementSetManagedResultSet.java b/src/java/com/mchange/v2/c3p0/impl/NullStatementSetManagedResultSet.java
index 54be0ea..d6f6147 100644
--- a/src/java/com/mchange/v2/c3p0/impl/NullStatementSetManagedResultSet.java
+++ b/src/java/com/mchange/v2/c3p0/impl/NullStatementSetManagedResultSet.java
@@ -326,4 +326,10 @@ public int getHoldability()
 {
     throw new RuntimeException(new NoSuchMethodException("stub method"));
 }
+
+public Object getObject(String columnLabel, Class type) throws SQLFeatureNotSupportedException
+{ throw new SQLFeatureNotSupportedException(); }
+
+public Object getObject(int columnNumber, Class type) throws SQLFeatureNotSupportedException
+{ throw new SQLFeatureNotSupportedException(); }
 }
diff --git a/src/java/com/mchange/v2/c3p0/impl/SetManagedDatabaseMetaData.java b/src/java/com/mchange/v2/c3p0/impl/SetManagedDatabaseMetaData.java
index 8c2523e..4a36ed4 100644
--- a/src/java/com/mchange/v2/c3p0/impl/SetManagedDatabaseMetaData.java
+++ b/src/java/com/mchange/v2/c3p0/impl/SetManagedDatabaseMetaData.java
@@ -193,6 +193,16 @@ final class SetManagedDatabaseMetaData extends FilterDatabaseMetaData
     {
 	throw new RuntimeException(new NoSuchMethodException("stub method"));
     }
+
+    public boolean generatedKeyAlwaysReturned() throws SQLFeatureNotSupportedException
+    {
+	throw new SQLFeatureNotSupportedException();
+    }
+
+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLFeatureNotSupportedException
+    {
+	throw new SQLFeatureNotSupportedException();
+    }
 }
 
 
diff --git a/src/java/com/mchange/v2/c3p0/impl/SnatchFromSetResultSet.java b/src/java/com/mchange/v2/c3p0/impl/SnatchFromSetResultSet.java
index 248901a..a928dcc 100644
--- a/src/java/com/mchange/v2/c3p0/impl/SnatchFromSetResultSet.java
+++ b/src/java/com/mchange/v2/c3p0/impl/SnatchFromSetResultSet.java
@@ -322,4 +322,10 @@ final class SnatchFromSetResultSet extends FilterResultSet
     {
        throw new RuntimeException(new NoSuchMethodException("stub method"));
     }
+
+    public Object getObject(String columnLabel, Class type) throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
+
+    public Object getObject(int columnNumber, Class type) throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
 }
diff --git a/src/java/com/mchange/v2/c3p0/test/FreezableDriverManagerDataSource.java b/src/java/com/mchange/v2/c3p0/test/FreezableDriverManagerDataSource.java
index 92c5bc3..fa5e133 100644
--- a/src/java/com/mchange/v2/c3p0/test/FreezableDriverManagerDataSource.java
+++ b/src/java/com/mchange/v2/c3p0/test/FreezableDriverManagerDataSource.java
@@ -312,4 +312,7 @@ public final class FreezableDriverManagerDataSource extends DriverManagerDataSou
 	    throw new SQLException("no object found");
 	}
     }
+
+    public java.util.logging.Logger getParentLogger() throws java.sql.SQLFeatureNotSupportedException
+    { throw new java.sql.SQLFeatureNotSupportedException(); }
 }
diff --git a/src/java/com/mchange/v2/c3p0/util/CloseReportingConnectionWrapper.java b/src/java/com/mchange/v2/c3p0/util/CloseReportingConnectionWrapper.java
index f7fe4ec..0bcc76d 100644
--- a/src/java/com/mchange/v2/c3p0/util/CloseReportingConnectionWrapper.java
+++ b/src/java/com/mchange/v2/c3p0/util/CloseReportingConnectionWrapper.java
@@ -119,4 +119,19 @@ public class CloseReportingConnectionWrapper extends FilterConnection
     {
 	throw new RuntimeException(new NoSuchMethodException("stub method"));
     }
+
+    public int getNetworkTimeout() throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
+
+    public void setNetworkTimeout(java.util.concurrent.Executor executor, int milliseconds) throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
+
+    public void abort(java.util.concurrent.Executor executor) throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
+
+    public String getSchema() throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
+
+    public void setSchema(String schema) throws SQLFeatureNotSupportedException
+    { throw new SQLFeatureNotSupportedException(); }
 }
